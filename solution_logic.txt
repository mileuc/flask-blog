Day 69 Goals - Adding Users to Our Blog Project

Wouldn't it be great if we could have some users on our blog?
What if we could let anyone sign up and comment on our blog posts?
In order for that to work, we would need to add authentication to our blog.
This will be the final step in our Blog Capstone Project.
Once we're done, it will be a fully-fledged blog website that you can publish and launch.

---------------------------------------------------------------------------------------------------------
Download the Starting Project

1. Download the starting .zip files: https://repl.it/@appbrewery/blog-with-users-start.zip
2. Unzip and open the project in PyCharm.
3. Make sure that the required packages (imports) are all installed and there are no red underlines.
The starting files consists of an SQLite database called blog.db, I created this in the same way we
created databases before.
4. Take a look a the database using DB Viewer and familiarise yourself with the fields in the database.
5. Run the app and navigate around using the buttons and navigation bar.
All the HTML pages should already render correctly.
The login/register forms won't work of course.
Look through all the code and make sure that everything makes sense before you get started.

---------------------------------------------------------------------------------------------------------
Requirement 1 - Register New Users

1. Use what you've learnt yesterday to allow users to go to the /register route to sign up to your blog
website.
You should create a WTForm in forms.py called RegisterForm and use Flask-Bootstrap to render a wtf
quick_form.

The data the user entered should be used to create a new entry in your blog.db in a User table.

HINT 1: You don't need to change anything in register.html
HINT 2: Don't worry about Flask-Login yet, you are just creating a new user in the database.
We'll log them in in the next step.

Solution:
In forms.py:
    from wtforms.validators import DataRequired, URL, Email

    class RegisterForm(FlaskForm):
        email = StringField(label="Email", validators=[DataRequired(), Email()])
        password = PasswordField(label="Password", validators=[DataRequired()])
        name = StringField(label="Name", validators=[DataRequired()])
        submit = SubmitField("Register")

In main.py:
    from forms import CreatePostForm, RegisterForm

    class User(UserMixin, db.Model):
         __tablename__ = "users"
        id = db.Column(db.Integer, primary_key=True)
        email = db.Column(db.String(100), unique=True)
        password = db.Column(db.String(100))
        name = db.Column(db.String(1000))


    # Create all the tables in the database
    db.create_all()

    @app.route('/register', methods=["GET", "POST"])
    def register():
        form = RegisterForm()
        if form.validate_on_submit():
            new_user = User()
            new_user.email = form.email.data
            new_user.password = generate_password_hash(form.password.data, method="pbkdf2:sha256", salt_length=8)
            new_user.name = form.name.data
            db.session.add(new_user)
            db.session.commit()
            return redirect(url_for("get_all_posts"))
        return render_template("register.html", form=form)

    if __name__ == "__main__":
        # app.run(host='0.0.0.0', port=5000)
        app.run(debug=True)

---------------------------------------------------------------------------------------------------------
Requirement 2 - Login Registered Users

1. Users who have been successfully registered (added to the user table in the database) should be able
to go to the /login route to use their credentials to log in.
You will need to review the Flask-Login docs and the lessons from yesterday to be able to do this.

2. Add 1 line of code in the /register route so that when users successfully register they are taken back
to the home page and are logged in with Flask-Login.

Solution:
In header.html:
      {% if logged_in: %}
      <li class="nav-item">
        <a class="nav-link" href="{{ url_for('logout') }}">Log Out</a>
      </li>
      {% else: %}
      <li class="nav-item">
        <a class="nav-link" href="{{ url_for('register') }}">Register</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="{{ url_for('login') }}">Login</a>
      </li>
      {% endif %}
In main.py:
    from forms import CreatePostForm, RegisterForm, LoginForm

    login_manager = LoginManager()
    login_manager.init_app(app)

    @login_manager.user_loader
    def load_user(user_id):
        return User.query.get(int(user_id))

    @app.route('/login', methods=["GET", "POST"])
    def login():
        form = LoginForm()
        if form.validate_on_submit():
            login_email = form.email.data
            login_password = form.password.data
            requested_user = User.query.filter_by(email=login_email).first()
            if requested_user:
                if check_password_hash(pwhash=requested_user.password, password=login_password):
                    login_user(requested_user)
                    return redirect(url_for("get_all_posts"))
        return render_template("login.html", form=form, logged_in=current_user.is_authenticated)

    @app.route('/logout')
    def logout():
        logout_user()
        return redirect(url_for('get_all_posts'))


3. In the in the /register route, if a user is trying to register with an email that already exists in the
database then they should be redirected to the /login route and a flash message used to tell them to log in
with that email instead.

Solution:
In login.html:
      <div class="col-lg-8 col-md-10 mx-auto content">
        {% with messages = get_flashed_messages() %}
          {% if messages %}
            {% for message in messages %}
              <p>{{ message }}<p>
            {% endfor %}
          {% endif %}
        {% endwith %}
        {{ wtf.quick_form(form, novalidate=True, button_map={"submit": "primary"}) }}
      </div>

In main.py:
    @app.route('/register', methods=["GET", "POST"])
    def register():
        form = RegisterForm()
        if form.validate_on_submit():
            if User.query.filter_by(email=form.email.data).first():
                flash("Sorry, this email already exists in the database. Please log in instead.")
                return redirect(url_for("login"))

            new_user = User()
            new_user.email = form.email.data
            new_user.password = generate_password_hash(form.password.data, method="pbkdf2:sha256", salt_length=8)
            new_user.name = form.name.data
            db.session.add(new_user)
            db.session.commit()
            login_user(new_user)
            return redirect(url_for("get_all_posts"))
        return render_template("register.html", form=form, logged_in=current_user.is_authenticated)

4. In the /login route, if a user's email does not exist in the database or if their password does not match the
one stored using check_password() then they should be redirected back to /login and a flash message should let
them know what they issue was and ask them to try again.

Solution:
    @app.route('/login', methods=["GET", "POST"])
    def login():
        form = LoginForm()
        if form.validate_on_submit():
            login_email = form.email.data
            login_password = form.password.data
            requested_user = User.query.filter_by(email=login_email).first()
            if requested_user:
                if check_password_hash(pwhash=requested_user.password, password=login_password):
                    login_user(requested_user)
                    return redirect(url_for("get_all_posts"))
                else:
                    flash("Sorry, wrong password! Please try again.")
                    return redirect(url_for("login"))
            else:
                flash("Sorry, that email does not exist! Please try again.")
                return redirect(url_for("login"))
        return render_template("login.html", form=form, logged_in=current_user.is_authenticated)

5. Figure out how to update the navbar so that when a user is not logged in it shows:
But if the user is logged in / authenticated after registering, then the navbar should show:
HINT: The navbar code is inside header.html
HINT: https://flask-login.readthedocs.io/en/latest/#login-example
Solution:
In header.html:
      {% if logged_in: %}
      <li class="nav-item">
        <a class="nav-link" href="{{ url_for('logout') }}">Log Out</a>
      </li>
      {% else: %}
      <li class="nav-item">
        <a class="nav-link" href="{{ url_for('register') }}">Register</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="{{ url_for('login') }}">Login</a>
      </li>
      {% endif %}

In main.py, add:
    logged_in=current_user.is_authenticated
To every render_template statement each route.
Everytime you call render_template(), you pass the current_user over to the template.
current_user.is_authenticated will be True if they are logged in/authenticated after registering.
You can check for this is header.html

6. Code up the /logout route so that when the user clicks on the LOG OUT button, it logs them out and takes
them back to the home page.
Solution:
    @app.route('/logout')
    def logout():
        logout_user()
        return redirect(url_for('get_all_posts'))

---------------------------------------------------------------------------------------------------------
Requirement 3 - Protect Routes
In our blog, the first registered user will be the admin. They will be able to create new blog posts,
edit posts and delete posts.

1. The first user's id is 1. We can use this in index.html and post.html to make sure that only the
admin user can see the "Create New Post" and "Edit Post" and Delete buttons.
Solution:
index.html:
    {% if current_user.id == 1 %}
    <a href="{{url_for('delete_post', post_id=post.id) }}">âœ˜</a>
    {% endif %}

    {% if current_user.id == 1 %}
    <div class="clearfix">
      <a class="btn btn-primary float-right" href="{{url_for('add_new_post')}}">Create New Post</a>
    </div>
    {% endif %}

post.html:
    {% if current_user.id == 1 %}
    <div class="clearfix">
      <a class="btn btn-primary float-right" href="{{url_for('edit_post', post_id=post.id)}}">Edit Post</a>
    </div>
    {% endif %}

2. Just because a user can't see the buttons, they can still manually access the /edit-post or
 /new-post or /delete routes. Protect these routes by creating a Python decorator called @admin_only

If the current_user's id is 1 then they can access those routes, otherwise, they should get
a 403 error (not authorised).

HINT 1: You might need to review the lessons on Python Decorators on day 54.
HINT 2: See what the @login_required decorator looks like:
    https://flask.palletsprojects.com/en/1.1.x/patterns/viewdecorators/#login-required-decorator
HINT 3: The abort function is quick way to return HTTP errors like 403 or 404:
    https://flask.palletsprojects.com/en/1.1.x/patterns/errorpages/

Solution:
    from flask import Flask, render_template, redirect, url_for, flash, abort
    from functools import wraps

    def admin_only(function):
        @wraps(function)
        def decorated_function(*args, **kwargs):
            #If id is not 1 or the user is not logged in then return abort with 403 error
            if not current_user.is_authenticated or current_user.id != 1:
                return abort(403)
            #Otherwise continue with the route function
            return function(*args, **kwargs)
        return decorated_function

Mark the routes "/new-post", "/edit-post/<int:post_id>", "/delete/<int:post_id>" with @admin_only

---------------------------------------------------------------------------------------------------------
Creating Relational Databases

Given that the 1st user is the admin and the blog owner.
It would make sense if we could link the blog posts they write to their user in the database.
In the future, maybe we will want to invite other users to write posts in the blog and grant them the admin
privileges.

So we need to create a relationship between the User table and the BlogPost table to link them together.
So we can see which BlogPosts a User has written.
Or see which User is the author of a particular BlogPost.

If we were just writing Python code, you could imagine creating a User object which has a property called
posts that contains a List of BlogPost objects.

e.g.
    class User:
        def __init__(self, name, email, password):
             self.name = name
             self.email = email
             self.password = password
             self.posts = []

    class BlogPost:
        def __init__(self, title, subtitle, body):
             self.title = title
             self.subtitle = subtitle
             self.body = body

    new_user = User(
        name="Angela",
        email="angela@email.com",
        password=123456,
        posts=[
            BlogPost(
                title="Life of Cactus",
                subtitle="So Interesting",
                body="blah blah"
            )
        ]
    }

This would make it easy to find all the BlogPosts a particular user has written.
But what about the other way around?
How can you find the author of a particular BlogPost object?
This is why we're using a database instead of just simple Python data structures.

In relational databases such as SQLite, MySQL or Postgresql we're able to define a relationship between
tables using a ForeignKey and a relationship() method.

e.g. If we wanted to create a One to Many relationship between the User Table and the BlogPost table, where
One User can create Many BlogPost objects, we can use the SQLAlchemy docs to achieve this.
    https://docs.sqlalchemy.org/en/13/orm/basic_relationships.html

CHALLENGE 1: See if you can modify the User (Parent) and BlogPost (Child) class code to create a
bidirectional One-to-Many relationship between the two tables.
You should be able to easily locate the BlogPosts a User has written and also the User of any BlogPost object.

Solution:
    class User(UserMixin, db.Model):
        __tablename__ = "users"
        id = db.Column(db.Integer, primary_key=True)
        email = db.Column(db.String(100), unique=True)
        password = db.Column(db.String(100))
        name = db.Column(db.String(1000))
        # This will act like a List of BlogPost objects attached to each User.
        # The "author" refers to the author property in the BlogPost class.
        posts = relationship("BlogPost", back_populates="author")


    class BlogPost(db.Model):
        __tablename__ = "blog_posts"
        id = db.Column(db.Integer, primary_key=True)

        #Create Foreign Key, "users.id" - the users refers to the tablename inside the User class.
        author_id = db.Column(db.Integer, db.ForeignKey("users.id"))
        # Create reference to the User object, the "posts" refers to the posts protperty in the User class
        # author property is now a object of the User class
        author = relationship("User", back_populates="posts")

        title = db.Column(db.String(250), unique=True, nullable=False)
        subtitle = db.Column(db.String(250), nullable=False)
        date = db.Column(db.String(250), nullable=False)
        body = db.Column(db.Text, nullable=False)
        img_url = db.Column(db.String(250), nullable=False)

Re-creating the Database after changes to the Schema

If you re-run your blog at this point you'll get an error:
OperationalError: (sqlite3.OperationalError) no such column: blog_posts.author_id

The reason is that our new code in the main.py modifies our database model by adding a new column into
our database that was not present in the original blog.db  from the starter code:
    author_id = db.Column(db.Integer, db.ForeignKey("users.id"))
We don't have any valuable data at this point that we'd like to preserve, so the easiest way to simply
delete the existing blog.db entirely and to use the line db.create_all() to re-create all the tables
from scratch.
Remember, this means you also have to register your user again and create a post since we've just wiped
our database.

Now if you refresh your Blog website, you'll see the author name disappear from the index.html and
page.html pages.

CHALLENGE 2: Modify the index.html and post.html pages so that the author name is still displayed
in the right places.
HINT: the author property of BlogPost is now a User object.

Solution:
index.html:
  <p class="post-meta">Posted by
    <a href="#">{{post.author.name}}</a>

post.html:
    <span class="meta">Posted by
      <a href="#">{{post.author.name}}</a>
      on {{post.date}}</span>

---------------------------------------------------------------------------------------------------------
Requirement 4 - Allow Any User to Add Comments to BlogPosts

1. Create a CommentForm in the form.py file it will only contain a single CKEditorField for users to
write their comments.
Hint: You might need to check the documentation or day 67 to see how we implement the CKEditor.

In forms.py:
    class CommentForm(FlaskForm):
        comment = CKEditorField(label="Comment", validators=[DataRequired()])
        submit = SubmitField(label="Submit Comment")

In post.html:
    <!--Comments Area -->
          #Load the CKEditor
            {{ ckeditor.load() }}
          #Configure it with the name of the form field from CommentForm
            {{ ckeditor.config(name='comment') }}
          #Create the wtf quickform from CommentForm
            {{ wtf.quick_form(form, novalidate=True, button_map={"submit": "primary"}) }}

In main.py:
    from forms import CreatePostForm, RegisterForm, LoginForm, CommentForm

    @app.route("/post/<int:post_id>")
    def show_post(post_id):
        requested_post = BlogPost.query.get(post_id)
        form = CommentForm()
        return render_template("post.html", post=requested_post, logged_in=current_user.is_authenticated, form=form)


The next step is to allow users to leave a comment and save the comment.
Now that we've seen how relationships can be established between tables in our database.
Let's step up our relationships to create a new Table where any user can write comments to our blog posts.

2. Create a Table called Comment where the tablename is "comments".
It should contain an id and a text property which will be the primary key and the text entered into the CKEditor.

Solution:
    class Comment(db.Model):
        __tablename__ = "comments"
        id = db.Column(db.Integer, primary_key=True)
        body = db.Column(db.Text, nullable=False)

    # Create all the tables in the database
    db.create_all()

3. Establish a One to Many relationship Between the User Table (Parent) and the Comment table (Child).
Where One User is linked to Many Comment objects.

4. Establish a One to Many relationship between each BlogPost object (Parent) and Comment object (Child).
Where each BlogPost can have many associated Comment objects.

Solution:
    class User(UserMixin, db.Model):
        __tablename__ = "users"
        id = db.Column(db.Integer, primary_key=True)
        email = db.Column(db.String(100), unique=True)
        password = db.Column(db.String(100))
        name = db.Column(db.String(1000))

        # add parent relationship (to BlogPost)
        # This will act like a List of BlogPost objects attached to each User
        # The "author" refers to the author property in the BlogPost class
        posts = relationship("BlogPost", back_populates="author")

        # add parent relationship (to Comment)
        # This will act like a List of Comment objects attached to each User
        # "comment_author" refers to the comment_author property in the Comment class
        comments = relationship("Comment", back_populates="comment_author")


    class BlogPost(db.Model):
        __tablename__ = "blog_posts"
        id = db.Column(db.Integer, primary_key=True)
        title = db.Column(db.String(250), unique=True, nullable=False)
        subtitle = db.Column(db.String(250), nullable=False)
        date = db.Column(db.String(250), nullable=False)
        body = db.Column(db.Text, nullable=False)
        img_url = db.Column(db.String(250), nullable=False)

        # add parent relationship (to Comment)
        # This will act like a List of Comment objects attached to each BlogPost
        # The "post" refers to the post property in the BlogPost class.
        comments = relationship("Comment", back_populates="parent_post")

        # add child relationship (to User)
        # "users.id" The users refers to the tablename of the Users class.
        # create reference to the User object, "posts" refers to the posts property in the User class
        author_id = db.Column(db.Integer, db.ForeignKey("users.id"))
        author = relationship("User", back_populates="posts")  # author property is now a object of the User class


    class Comment(db.Model):
        __tablename__ = "comments"
        id = db.Column(db.Integer, primary_key=True)
        body = db.Column(db.Text, nullable=False)

        # add child relationship (to User)
        # "users.id" The users refers to the tablename of the Users class.
        # create reference to the User object, "comments" refers to the comments property in the User class.
        author_id = db.Column(db.Integer, db.ForeignKey("users.id"))
        comment_author = relationship("User", back_populates="comments")  # comment_author property is now a object of the User class

        # add child relationship (to BlogPost)
        # "blog_posts.id" The blog_posts refers to the tablename of the BlogPost class.
        # create reference to the BlogPost object, "comments" refers to the comments property in the BlogPost class.
        post_id = db.Column(db.Integer, db.ForeignKey("blog_posts.id"))
        parent_post = relationship("BlogPost", back_populates="comments")  # post property is now a object of the BlogPost class

# Create all the tables in the database
db.create_all()


5. At this point, with a new Table added, it's a good idea to delete the existing blog.db entirely and
to use the line db.create_all() to create all the tables from scratch.

This means you should create a new admin user (id == 1), a new blog post and another user who will make
some comments.
Register admin user first, then register a new blog reader user, and then create a new blog post.


6. Log in as your John Doe user (or any user that is not the primary user) and make a comment on a blog post.
In order for this to work, you will need to update the /post/<int:post_id> route.
Make sure that only authenticated (logged-in) users can save their comment.
Otherwise, they should see a flash message telling them to log in and redirect them to the /login route.

Solution:
    @app.route("/post/<int:post_id>", methods=["GET", "POST"])
    def show_post(post_id):
        requested_post = BlogPost.query.get(post_id)
        form = CommentForm()

        if form.validate_on_submit():
            if not current_user.is_authenticated:
                flash("Please login or register to comment!")
                return redirect(url_for("login"))
            new_comment = Comment()
            new_comment.body = form.comment.data
            new_comment.comment_author = current_user
            new_comment.parent_post = requested_post
            db.session.add(new_comment)
            db.session.commit()

        return render_template("post.html", post=requested_post, logged_in=current_user.is_authenticated, form=form)


7. Update the code in post.html to display all the comments associated with the blog post.
HINT 1: Don't worry about the commenter image just yet.
HINT 2: comments is a property of each blog post, you can treat it like a List.
HINT 3: The text of each comment is created from the CKEditor just like the body of each blog post
so it will be saved in HTML format.

In post.html:
      <div class="col-lg-8 col-md-10 mx-auto comment">
          <ul class="commentList">
            {% for comment in post.comments %}
            <li>
                <div class="commenterImage">
                  <img src="https://pbs.twimg.com/profile_images/744849215675838464/IH0FNIXk.jpg"/>
                </div>
                <div class="commentText">
                  <p>{{ comment.body|safe }}</p>
                  <span class="date sub-text">{{ comment.comment_author.name }}</span>
                </div>
            </li>
            {% endfor %}
          </ul>
        </div>

Gravatar images are used across the internet to provide an avatar image for blog commenter's.
Gravatar allows you to change the image that you use across the blog websites that use Gravatar here:
    http://en.gravatar.com/
It's super simple to implement into a Flask application.

8. Use the Gravatar docs here to add Gravatar images into your comments section.
HINT: http://en.gravatar.com/site/implement/images
Solution:
In main.py:
    from flask_gravatar import Gravatar
    gravatar = Gravatar(app,
                    size=100,
                    rating='g',
                    default='mp',
                    force_default=False,
                    force_lower=False,
                    use_ssl=False,
                    base_url=None)

In post.html:
    <div class="commenterImage">
      <img src="{{ comment.comment_author.email | gravatar }}"/>
    </div>

